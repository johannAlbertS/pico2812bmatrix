use std::env::current_dir;

//const TEXT: &str = "github.com/johannAlbertS/pico2812bmatrix  Anwendungen fur die Matrix sind wilkommen";
const TEXT: &str = "404 talk not found";
// const TEXT: &str = "Simon Duckert";
// const TEXT: &str = "Anke Domsheidt Berg";
// const TEXT: &str = "Enny";
// const TEXT: &str = "Bonnie Mehring";
// const TEXT: &str = "Benedikt";
// const TEXT: &str = "Katja Lauth";

const OUTPUT_FILE_NAME: &str = "config.rs";
const SPACING: i32 = 11;

fn main() {
    let mut output = String::from("// FILE GENERATED BY BUILD.RS; DO NOT EDIT\n\n");
    let text = TEXT.to_uppercase();

    // Get buffer len and build char array
    let mut buffer_len = 0;
    output.push_str(&format!("pub const TEXT: [char; {}] = [", text.len()));
    for letter in text.chars() {
        output.push_str(&format!("\'{letter}\', "));
        buffer_len += get_letter_buffer_len(letter);
    }
    output.push_str("];\n\n");

    // Generate textbuffer!() macro
    output.push_str(&format!(
        "// Buffer len: {buffer_len}, Spacing: {SPACING}\n"
    ));
    output.push_str("#[macro_export]\nmacro_rules! textbuffer {\n    () => {\n        [\n");
    for _i in 0..buffer_len + SPACING {
        output.push_str("            textbuffer_line!(),\n")
    }
    output.push_str("        ]\n    }\n}\n");

    // Write to output_file
    let output_file = current_dir().unwrap().join("src").join(OUTPUT_FILE_NAME);
    std::fs::write(output_file, output).unwrap();
}

fn get_letter_buffer_len(letter: char) -> i32 {
    match letter {
        'k' | 'm' | 'n' | 'q' | 't' | 'v' | 'w' | 'x' | 'y' | 'z' => 6,
        'i' => 4,
        ' ' => 3,
        '.' => 2,
        _ => 5,
    }
}
